import sys
sys.path.append("../")

from functools import partial

import numpy as np
import matplotlib.pyplot as plt

import linqaoa
import quadqaoa
import qwqaoa
import knapsack
import circuits
import optimization
import visualization


def objective_function(bitstring, problem):
    choice = linqaoa.bitstring_to_choice(bitstring, problem)
    if knapsack.is_choice_feasible(choice, problem):
        return knapsack.value(choice, problem)
    return 0


def quadqaoa_expectation_value(problem, p, a, b):
    circuit = circuits.QuadQAOA(problem, p)
    angles = quadqaoa.find_optimal_angles(circuit, problem, a, b)
    probs = quadqaoa.get_probs_dict(circuit, problem, angles, a, b)
    obj = partial(objective_function, problem=problem)
    expectation = optimization.average_value(probs, obj)
    return expectation


def linqaoa_expectation_value(problem, p, a):
    circuit = circuits.LinQAOA(problem, p)
    angles = linqaoa.find_optimal_angles(circuit, problem, a)
    probs = linqaoa.get_probs_dict(circuit, problem, angles, a)
    obj = partial(objective_function, problem=problem)
    expectation = optimization.average_value(probs, obj)
    return expectation


def qwqaoa_expectation_value(problem, p, m):
    circuit = circuits.QuantumWalkQAOA(problem, p, m)
    angles = qwqaoa.find_optimal_angles(circuit, problem)
    probs = qwqaoa.get_probs_dict(circuit, problem, angles)
    obj = partial(objective_function, problem=problem)
    expectation = optimization.average_value(probs, obj)
    return expectation


def quadqaoa_get_ratio(problem, p, a, b):
    expectation = quadqaoa_expectation_value(problem, p, a, b)
    best_known_solutions = knapsack.best_known_solutions(problem)
    choice = best_known_solutions[0]
    best_value = knapsack.value(choice, problem)
    ratio = expectation / best_value
    return ratio


def linqaoa_get_ratio(problem, p, a):
    expectation = linqaoa_expectation_value(problem, p, a)
    best_known_solutions = knapsack.best_known_solutions(problem)
    choice = best_known_solutions[0]
    best_value = knapsack.value(choice, problem)
    ratio = expectation / best_value
    return ratio


def qwqaoa_get_ratio(problem, p, m):
    expectation = qwqaoa_expectation_value(problem, p, m)
    best_known_solutions = knapsack.best_known_solutions(problem)
    choice = best_known_solutions[0]
    best_value = knapsack.value(choice, problem)
    ratio = expectation / best_value
    return ratio


print("Calculate approximation ratios for different problem instances and for all three approaches.")

name = "problem_dependence"
log_filename = f"{name}.txt"
plot_filename = f"{name}.pdf"

problems = knapsack.toy_problems
problem_names = ["A", "B", "C", "D", "E", "F", "G"]

print("1. QuadQAOA")
p = 4
a = 1
print(f"Parameters: {p = }, {a = }")
for problem, problem_name in zip(problems, problem_names):
    b = 2 * quadqaoa.bmin(a, problem)
    ratio = quadqaoa_get_ratio(problem, p, a, b)
    print(f"Problem {problem_name}: {b = }, rho = {ratio}")

print("2. LinQAOA")
p = 2
print(f"Parameters: {p = }")
for problem, problem_name in zip(problems, problem_names):
    a = 2 * linqaoa.amin(problem)
    ratio = linqaoa_get_ratio(problem, p, a)
    print(f"Problem {problem_name}: {a = }, rho = {ratio}")

print("3. QWQAOA")
p = 2
m = 3
print(f"Parameters: {p = }, {m = }")
for problem, problem_name in zip(problems, problem_names):
    ratio = qwqaoa_get_ratio(problem, p, m)
    print(f"Problem {problem_name}: rho = {ratio}")
